name: build-desktop

on:
  push:

jobs:
  build:
    env:
      BUILD_MIRROR: "http://archive.ubuntu.com/ubuntu"
      SUIT: "focal"
      USERNAME: "user"
      PRODUCT_MIRROR: "http://mirrors.tuna.tsinghua.edu.cn/ubuntu"
    runs-on: ubuntu-20.04
    outputs:
      kerver: ${{ steps.cleanup.outputs.kerver }}

    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
      -
        name: Cache Deb Packages
        uses: actions/cache@v2
        if: github.event_name == 'push'
        with:
          path: /tmp/.debuildcache
          key: ${{ runner.os }}-debs-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-debs-
      -
        name: Cache Deb Packages
        uses: actions/cache@v2
        if: github.event_name == 'pull_request'
        with:
          path: /tmp/.debuildcache
          key: ${{ runner.os }}-pr-${{ github.event.pull_request.head.user.login }}-debs-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-pr-${{ github.event.pull_request.head.user.login }}-debs-
            ${{ runner.os }}-debs-
      -
        name: Cache Deb Packages
        if: github.event_name != 'push' && github.event_name != 'pull_request'
        run: |
          echo "I do not know how to setup cache"
          exit -1

      - name: Build Canonical Package List
        run: |
          echo "Ubuntu_${SUIT}" > current_suit.txt
          sed -r 's/^[ \t]+//; s/[ \t]+$//; /^#/d;' packages.list | sort | uniq > packages_can.list

      - name: Cache Debootstrap Result
        uses: actions/cache@v2
        id: rootfscache
        with:
          path: /tmp/.debuildtar
          key: ${{ runner.os }}-debtar-${{ hashFiles('packages_can.list', 'current_suit.txt') }}

      - name: Find out current mirror in the build environment
        continue-on-error: true
        run: |
          if [ "$(lsb_release -i -s )" != "Ubuntu" ]; then
            exit 0;
          fi
          cat /etc/apt/sources.list | grep "^deb" |
            grep "$(lsb_release -c -s)"  | awk '{print $2}' | sed 's@/$@@' |
            while read url; do
              if curl --head -sfL "${url}/dists/${SUIT}/InRelease" > /dev/null; then
                echo "Found current mirror: ${url}" >&2
                echo "BUILD_MIRROR=${url}" >> $GITHUB_ENV
                break;
              fi
            done
          exit 0;

      -
        name: Prepare build environment
        run: |
          sudo apt-get update
          sudo apt-get install libxml2-utils jq squashfs-tools debootstrap

      -
        name: Debootstrap
        run: |
          sudo mkdir -p rootfs/
          mkdir -p /tmp/.debuildcache/
          mkdir -p /tmp/.debuildtar/
          if [ -f /tmp/.debuildtar/rootfs.tar ]; then
            if sudo tar -C rootfs/ --checkpoint=1000 -xf /tmp/.debuildtar/rootfs.tar; then
              exit 0
            else
              sudo rm -rf rootfs/
              sudo mkdir -p rootfs/
            fi
          fi
          sudo debootstrap \
            --cache-dir=/tmp/.debuildcache \
            --merged-usr --arch=amd64 \
            --components=main,universe,non-free \
            --exclude=ubuntu-minimal,nplan,netplan.io,isc-dhcp-client,isc-dhcp-common \
            --include=gnupg \
            "$SUIT" rootfs/ "$BUILD_MIRROR"
      -
        name: Bind mount proc, sys
        run: |
          for i in sys proc; do
            sudo mount --bind /$i rootfs/$i
          done
      - name: Prepare to configure
        run: |
          cat > /tmp/func << 'EOF'
          export LANG=C
          in-root(){
            sudo chroot rootfs "$@"
          }
          as-user(){
            sudo chroot rootfs sudo -H -u "$USERNAME" "$@"
          }
          EOF
      -
        name: Post install configuration
        run: |
          . /tmp/func
          in-root debconf-set-selections <<EOF
          locales	locales/locales_to_be_generated	multiselect	en_US.UTF-8 UTF-8, zh_CN.UTF-8 UTF-8
          locales	locales/default_environment_locale	select	en_US.UTF-8
          tzdata	tzdata/Areas	select	Asia
          tzdata	tzdata/Zones/Asia	select	Shanghai
          EOF
          in-root rm -f "/etc/locale.gen"
          in-root ln -fs /usr/share/zoneinfo/Asia/Shanghai /etc/localtime
          sudo mkdir -p rootfs/var/lib/locales/supported.d/
          echo "zh_CN.UTF-8 UTF-8" | sudo tee rootfs/var/lib/locales/supported.d/zh-hans  > /dev/null
          in-root dpkg-reconfigure --frontend noninteractive locales < /dev/null
          in-root dpkg-reconfigure --frontend noninteractive tzdata < /dev/null
          sudo tee rootfs/etc/apt/sources.list << EOF
          deb ${BUILD_MIRROR} ${SUIT} main restricted
          deb ${BUILD_MIRROR} ${SUIT}-updates main restricted

          deb ${BUILD_MIRROR} ${SUIT} universe
          deb ${BUILD_MIRROR} ${SUIT}-updates universe

          deb ${BUILD_MIRROR} ${SUIT} multiverse
          deb ${BUILD_MIRROR} ${SUIT}-updates multiverse

          deb ${BUILD_MIRROR} ${SUIT}-backports main restricted universe multiverse
          EOF
      -
        name: Install additional softwares
        run: |
          . /tmp/func
          sudo mkdir -p rootfs/.debuildcache
          sudo mount --bind /tmp/.debuildcache rootfs/.debuildcache

          in-root apt-get update
          in-root apt-get -oDir::Cache::Archives=/.debuildcache -y dist-upgrade
          in-root apt-get install -y linux-image-5.11.0-38-generic

          curl -fsL "https://download.sublimetext.com/sublimehq-pub.gpg" | in-root apt-key add -
          curl -fsL "https://packages.microsoft.com/keys/microsoft.asc" | in-root apt-key add -
          echo "deb https://download.sublimetext.com/ apt/stable/" | sudo tee rootfs/etc/apt/sources.list.d/sublime-text.list
          echo "deb https://packages.microsoft.com/repos/vscode stable main" | sudo tee rootfs/etc/apt/sources.list.d/vscode.list

          in-root apt-get update
          in-root apt-get -oDir::Cache::Archives=/.debuildcache --no-install-recommends -y install $(cat packages_can.list)
          in-root apt-get purge -y network-manager netplan.io snap snapd apport
          in-root systemctl mask systemd-networkd
          in-root apt-get -oDir::Cache::Archives=/.debuildcache -y install code sublime-text
          sudo rm -rf /tmp/.debuildcache/partial /tmp/.debuildcache/lock

      -
        name: Make cache for built system
        if: steps.rootfscache.outputs.cache-hit != 'true'
        run: |
          sudo umount rootfs/.debuildcache rootfs/sys rootfs/proc
          sudo rmdir rootfs/.debuildcache
          sudo tar -C rootfs/ --checkpoint=1000 --sparse --selinux --acls --xattrs --create --one-file-system --numeric-owner . > /tmp/.debuildtar/rootfs.tar
          for i in sys proc; do
            sudo mount --bind /$i rootfs/$i
          done

      -
        name: Install additional fonts
        run: |
          . /tmp/func
          echo "deb ${BUILD_MIRROR} hirsute main restricted universe multiverse" | sudo tee /etc/apt/sources.list.d/hirsute.list
          sudo apt-get update
          apt-get download fonts-jetbrains-mono/hirsute
          sudo rm /etc/apt/sources.list.d/hirsute.list
          sudo apt-get update
          sudo mv fonts-jetbrains-mono_*.deb rootfs/tmp/fonts-jetbrains-mono.deb
          in-root apt-get install --no-install-recommends -y /tmp/fonts-jetbrains-mono.deb
          sudo rm rootfs/tmp/fonts-jetbrains-mono.deb

      -
        name: Install the latest Eclipse
        run: |
          version="$(curl -sfL https://download.eclipse.org/technology/epp/downloads/release/release.xml |
                       xmllint --xpath "/packages/present[1]/text()" -)"
          echo "Found Eclipse version: ${version}"
          curl -fsL "https://www.eclipse.org/downloads/download.php?file=/technology/epp/downloads/release/${version}/eclipse-java-$(echo "$version" | tr '/' '-')-linux-gtk-x86_64.tar.gz&r=1" | sudo tar -C rootfs/opt -xz
          sudo tee rootfs/usr/share/applications/eclipse.desktop << EOF
          [Desktop Entry]
          Type=Application
          Name=Eclipse
          Comment=Eclipse Integrated Development Environment
          Icon=/opt/eclipse/icon.xpm
          Exec=/opt/eclipse/eclipse
          Terminal=false
          Categories=Development;IDE;Java;
          EOF
          sudo chmod 644 rootfs/usr/share/applications/eclipse.desktop
      -
        name: System configuration
        run: |
          echo "AllowUsers root" | sudo tee -a rootfs/etc/ssh/sshd_config
          echo "source-directory /run/interfaces.d" | sudo tee -a rootfs/etc/network/interfaces
          sudo mkdir -p rootfs/etc/X11/xorg.conf.d
          sudo tee rootfs/etc/X11/xorg.conf.d/10-serverflags.conf << EOF
          Section "ServerFlags"
              Option "BlankTime"  "0"
              Option "StandbyTime" "0"
              Option "SuspendTime" "0"
              Option "OffTime" "0"
          EndSection
          EOF
          sudo tee rootfs/etc/X11/xorg.conf.d/10-monitor.conf << EOF
          Section "Extensions"
              Option      "DPMS" "Disable"
          EndSection
          EOF
          sudo rm -f rootfs/etc/hostname
          . /tmp/func
          in-root systemctl disable dhcpcd
          in-root systemctl mask dhcpcd
      -
        name: Generate Access List
        env:
          ALLOW_IPS: ${{ secrets.ALLOW_IPS }}
        run: |
          sudo tee rootfs/etc/iptables/rules.v4 << EOF
          *filter
          :INPUT ACCEPT [0:0]
          :FORWARD DROP [0:0]
          :OUTPUT DROP [0:0]
          -A OUTPUT -d 127.0.0.0/8 -j ACCEPT
          EOF
          echo "$ALLOW_IPS" | while read ip; do
            if [ -n "$ip" ]; then
              echo "-A OUTPUT -d ${ip} -j ACCEPT" | sudo tee -a rootfs/etc/iptables/rules.v4 | sed -r 's/-d +[^ ]* /-d *** /'
            fi
          done
          echo "COMMIT" | sudo tee -a rootfs/etc/iptables/rules.v4

          sudo tee rootfs/etc/iptables/rules.v6 << EOF
          *filter
          :INPUT ACCEPT [0:0]
          :FORWARD DROP [0:0]
          :OUTPUT DROP [0:0]
          -A OUTPUT -d fe80::1234/128 -j ACCEPT
          -A OUTPUT -d ::1/128 -j ACCEPT
          -A OUTPUT -p ipv6-icmp -m icmp6 --icmpv6-type 135 -j ACCEPT
          -A OUTPUT -p ipv6-icmp -m icmp6 --icmpv6-type 136 -j ACCEPT
          COMMIT
          EOF

      -
        name: Setup public keys for root
        env:
          KEYS: ${{ secrets.ROOT_PUBKEY }}
        run: |
          sudo mkdir -p rootfs/root/.ssh
          sudo rm -f rootfs/root/.ssh/authorized_keys
          sudo touch rootfs/root/.ssh/authorized_keys
          sudo chmod 755 rootfs/root/.ssh
          sudo chmod 644 rootfs/root/.ssh/authorized_keys
          echo "$KEYS" | while read k; do
            if [ -z "$k" ]; then
              continue
            fi
            if echo "$k" | grep "^ssh-" >/dev/null ; then
              echo "$k" | sudo tee -a rootfs/root/.ssh/authorized_keys | sed -r 's/^(ssh-.{10}).*$/\1*****/'
            elif echo "$k" | grep "^http" >/dev/null ; then
              echo "# $k" | sudo tee -a rootfs/root/.ssh/authorized_keys | sed -r 's@(http[^:]*://[^/]*/.{3}).*$@\1*****@'
              echo "$(curl -Lsf "$k")" | sudo tee -a rootfs/root/.ssh/authorized_keys  | sed -r 's/^(ssh-.{10}).*$/\1*****/'
            else
              echo "Unknown public key type"
              exit -1
            fi
            echo | sudo tee -a rootfs/root/.ssh/authorized_keys
          done
      -
        name: Restore mirror configuration
        run: |
          sudo tee rootfs/etc/apt/sources.list << EOF
          deb ${PRODUCT_MIRROR} ${SUIT} main restricted
          deb ${PRODUCT_MIRROR} ${SUIT}-updates main restricted

          deb ${PRODUCT_MIRROR} ${SUIT} universe
          deb ${PRODUCT_MIRROR} ${SUIT}-updates universe

          deb ${PRODUCT_MIRROR} ${SUIT} multiverse
          deb ${PRODUCT_MIRROR} ${SUIT}-updates multiverse

          deb ${PRODUCT_MIRROR} ${SUIT}-backports main restricted universe multiverse
          EOF
          . /tmp/func
          in-root apt-get update
      -
        name: Create end user
        env:
          PASSWD: ${{ secrets.END_USER_PASSWD }}
        run: |
          . /tmp/func
          if [ -z "$PASSWD" ]; then
            PASSWD="user"
          fi
          in-root useradd -m -s /bin/bash "$USERNAME"
          echo "${USERNAME}:${PASSWD}" | in-root chpasswd

      - name: Shall we output changed files?
        id: debug_output
        env:
          DBG: ${{ secrets.debug_output }}
        run: |
          echo "::set-output name=debug::${DBG}"
      -
        name: See Changed Files
        if: steps.debug_output.outputs.debug == 'true'
        continue-on-error: true
        run: |
          for i in \
            /etc/ssh/sshd_config \
            /etc/network/interfaces \
            /etc/X11/xorg.conf.d/10-serverflags.conf \
            /etc/X11/xorg.conf.d/10-monitor.conf \
            /etc/iptables/rules.v4 \
            /etc/iptables/rules.v6 \
            /root/.ssh/authorized_keys \
            /etc/hostname
          do
            echo "=======FILE: $i"
            sudo stat "rootfs/$i" || true
            sudo cat "rootfs/$i" || true
          done



      -
        name: Configure dictionary
        run: |
          sudo mkdir -p rootfs/usr/local/share/goldendict
          sudo ln -sf /usr/share/goldendict-wordnet rootfs/usr/local/share/goldendict/goldendict-wordnet
          curl -Lsf "http://download.huzheng.org/zh_CN/stardict-oxford-gb-formated-2.4.2.tar.bz2" | sudo tar -C rootfs/usr/local/share/goldendict/ -xvj

      -
        name: Install vscode extensions
        run: |
          . /tmp/func
          download_release(){
            local repo_name="$1"
            local asset_name="$2"
            local output_name="$3"

            local down_url="$(curl -sfL "https://api.github.com/repos/${repo_name}/releases/latest" | jq -r '.assets[] | select (.name == "'"$asset_name"'") | [.][0].browser_download_url')"
            echo "Downloading $down_url"
            curl -sfL "$down_url" > "$output_name"
          }
          download_release "microsoft/vscode-cpptools" "cpptools-linux.vsix" "cpptools-linux.vsix"
          download_release "microsoft/vscode-python" "ms-python-release.vsix" "ms-python-release.vsix"
          for i in *.vsix; do
            sudo mv "$i" rootfs/
            as-user code --install-extension "/$i"
            sudo rm -f "rootfs/$i"
          done

      -
        name: Setup User settings
        run: |
          . /tmp/func
          as-user-mkdir(){
            dir="$1"
            as-user mkdir -p "/home/$USERNAME/$dir"
          }
          as-user-put(){
            file="$1"
            as-user-mkdir "$(dirname "$file")"
            as-user tee "/home/$USERNAME/$file" > /dev/null
          }
          as-user-mkdir "Desktop"
          for i in \
            code.desktop \
            emacs.desktop \
            firefox.desktop \
            org.gnome.gedit.desktop \
            gnome-language-selector.desktop \
            org.gnome.Terminal.desktop \
            gvim.desktop \
            org.gnome.Calculator.desktop \
            sublime_text.desktop \
            eclipse.desktop \
            goldendict.desktop
          do
            as-user cp "/usr/share/applications/$i" "/home/$USERNAME/Desktop/$i"
            as-user chmod +x "/home/$USERNAME/Desktop/$i"
          done
          as-user sed -i '/^OnlyShowIn/D' "/home/$USERNAME/Desktop/org.gnome.Terminal.desktop"

          as-user-put ".config/fcitx/profile" << EOF
          [Profile]
          IMName=sunpinyin
          EnabledIMList=fcitx-keyboard-us:True,sunpinyin:True,pinyin:True,shuangpin:True,wubi:True
          EOF

          as-user-put ".config/xfce4/helpers.rc" << EOF
          TerminalEmulator=gnome-terminal

          EOF

          as-user-put ".xinputrc" << EOF
          run_im fcitx
          EOF

          as-user-put ".config/Code/User/settings.json" << EOF
          {
                "editor.fontFamily": "'JetBrains Mono', 'Fira Code', 'Ubuntu Mono', Consolas, 'Courier New', monospace",
                "editor.fontLigatures": false
          }
          EOF

          as-user-put ".goldendict/config" << EOF
          <config>
           <paths>
            <path recursive="1">/usr/local/share/goldendict</path>
           </paths>
          </config>
          EOF

          as-user-put ".config/mimeapps.list" << EOF
          [Default Applications]
          application/pdf=firefox.desktop

          [Added Associations]
          application/pdf=firefox.desktop;
          EOF

          as-user-put "Desktop/cppref.desktop" << EOF
          [Desktop Entry]
          Version=1.0
          Encoding=UTF-8
          Name=CPP Reference
          Type=Link
          URL=file:///usr/share/cppreference/doc/html/en/index.html
          Icon=help-contents
          EOF
          as-user chmod +x "/home/$USERNAME/Desktop/cppref.desktop"
      -
        name: Cleanup and Pack
        id: cleanup
        run: |
          . /tmp/func
          kerver=$(in-root linux-version list | linux-version sort --reverse | head -n 1)
          if [ -z "$kerver" ]; then
            echo "::error ::Kernel is not correctlly installed"
            exit 1
          fi
          echo "::set-output name=kerver::${kerver}"
          in-root apt-get clean
          in-root apt-get check
          sudo umount rootfs/proc rootfs/sys
          sudo umount rootfs/.debuildcache || true
          sudo rmdir rootfs/.debuildcache || true
          mkdir -p images/ dist/
          sudo mksquashfs rootfs/ images/0000_clientsys.squash -noI -noD -noF -noX -noappend -e boot
          echo "$GITHUB_SHA" > images/version
          echo "0000_clientsys.squash" > images/series
          tar --create --checkpoint=1000 --gzip \
            --numeric-owner --owner root --group root \
            --no-recursion -C images/ --null --files-from <(
            cd images/
            find . -not -name "version" -print0
            echo -ne "version\0"
          ) | split --bytes=1536m --numeric-suffixes=1 - dist/images.tar.gz.
          sudo tar -f dist/kernel.tar.gz --create --checkpoint=1000 --gzip \
            --numeric-owner -C rootfs/ \
            $(sudo bash -c 'cd rootfs/; echo boot/vmlinu[xz]-"$0"' "$kerver") \
            "lib/modules/${kerver}" "lib/firmware"
      -
        name: Calculate Artifact Checksums
        run: |
          sha512sum dist/kernel.tar.gz | tee dist/kernel.tar.gz.sha512
          sha512sum dist/images.tar.gz.* | tee dist/images.tar.gz.sha512
      -
        name: Upload Aritfacts
        uses: actions/upload-artifact@v2
        with:
          name: System Image
          path: |
            dist/images.tar.gz.sha512
            dist/images.tar.gz.*
      -
        name: Upload Aritfacts
        uses: actions/upload-artifact@v2
        with:
          name: Kernel
          path: |
            dist/kernel.tar.gz.sha512
            dist/kernel.tar.gz

  kpatchNeeded:
    runs-on: ubuntu-20.04
    outputs:
      needPatch: ${{ steps.patchNeeded.outputs.needPatch }}
    needs:
      build
    steps:
    - id: patchNeeded
      run: |
        if [ "$(echo "${kver?}" | cut -d'-' -f 1)" = "5.4.0" ]; then
          patchver="$(echo "${kver?}" | cut -d'-' -f 2)"
          if [ "$patchver" -ge "71" -a "$patchver" -lt "74" ]; then
            echo "Squashfs Patch Needed!"
            echo "::set-output name=needPatch::true"
            exit 0;
          fi
        fi
        echo "::set-output name=needPatch::false"
      env:
        kver: ${{ needs.build.outputs.kerver }}

  kpatch:
    runs-on: ubuntu-20.04
    needs:
    - build
    - kpatchNeeded
    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000
    if: needs.kpatchNeeded.outputs.needPatch == 'true'
    steps:

      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          driver-opts: network=host

      - name: Cache Docker layers
        uses: actions/cache@v2
        if: github.event_name == 'push'
        with:
          path: /tmp/kpatch
          key: ${{ runner.os }}-kpatch-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-kpatch-
      - name: Cache Docker layers
        uses: actions/cache@v2
        if: github.event_name == 'pull_request'
        with:
          path: /tmp/kpatch
          key: ${{ runner.os }}-pr-${{ github.event.pull_request.head.user.login }}-kpatch-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-pr-${{ github.event.pull_request.head.user.login }}-kpatch-
            ${{ runner.os }}-kpatch-
      - name: Cache Docker layers
        if: github.event_name != 'push' && github.event_name != 'pull_request'
        run: |
          echo "I do not know how to setup cache"
          exit -1

      - name: Prepare cache directory
        run: |
          mkdir -p /tmp/kpatch/.buildx-cache
          mkdir -p /tmp/kpatch/kpatch-home

      - name: Build Docker image
        uses: docker/build-push-action@v2
        with:
          context: kpatch
          file: kpatch/Dockerfile
          push: true
          tags: localhost:5000/thupxe-kpatch
          cache-from: type=local,src=/tmp/kpatch/.buildx-cache
          cache-to: type=local,dest=/tmp/kpatch/.buildx-cache

      - name: Build Kpatch
        run: |
          mkdir -p product initramfs dist
          cp kpatch/*.patch kpatch/*.series product/
          sudo docker run --name kpatch \
            --volume "${PWD}/product":/product \
            --volume "/tmp/kpatch/kpatch-home":"/home/$(id --user --name)" \
            --env KVER="${kver?}" --env USER="$(id --user --name)" \
            --env UID="$(id --user)" --env GID="$(id --group)" --interactive \
            localhost:5000/thupxe-kpatch bash --noprofile --norc -eo pipefail << 'EOF'
            groupadd --gid "${GID?}" "${USER?}"
            useradd --home-dir "/home/${USER}" --gid "${GID?}" --uid "${UID?}" --shell \
             "$(which bash)" "${USER?}"
            apt-get --no-install-recommends install -y "linux-image-${KVER?}" "linux-image-${KVER?}-dbgsym"
          EOF
          sudo docker start kpatch
          sudo docker exec --interactive --user "$(id --user):$(id --group)" \
            --workdir /product \
            kpatch bash --noprofile --norc -eo pipefail << 'EOF'
            for i in *.series; do
              kpatch_name=${i%.series}
              if ! kpatch-build --target vmlinux --name "${kpatch_name}" \
                -a "${KVER?}" $(cat "$i"); then
                cat "${HOME}/.kpatch/build.log"
                exit 1
              fi
              echo "Built ${kpatch_name}.ko"
              modinfo "${kpatch_name}.ko"
            done
          EOF
          sudo docker kill kpatch
          sudo docker rm kpatch
          mkdir -p "initramfs/lib/modules/${kver}/kpatch/"
          cp product/*.ko "initramfs/lib/modules/${kver}/kpatch/"
          mkdir -p "initramfs/conf/conf.d/"
          cat > initramfs/conf/conf.d/thupxe_kpatch << 'EOF'
            for i in /lib/modules/$(uname -r)/kpatch/*.ko; do
              (exec -a insmod kmod "$i")
            done
          EOF
          cd initramfs
          cpio --null --create --format=newc --owner=+0:+0 < <(
            find "lib/modules/${kver}/" -print0
            find "conf/conf.d/" -print0
          ) | gzip > ../dist/kpatch.img
        env:
          kver: ${{ needs.build.outputs.kerver }}

      - uses: actions/upload-artifact@v2
        with:
          name: Kpatch
          path: dist/kpatch.img

  initramfs:
    runs-on: ubuntu-18.04
    needs:
    - build
    - kpatch
    if: always() && needs.build.result == 'success' && needs.kpatch.result != 'failure'
    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          driver-opts: network=host
      - name: Cache Docker layers
        uses: actions/cache@v2
        if: github.event_name == 'push'
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Cache Docker layers
        uses: actions/cache@v2
        if: github.event_name == 'pull_request'
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-pr-${{ github.event.pull_request.head.user.login }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-pr-${{ github.event.pull_request.head.user.login }}-buildx-
            ${{ runner.os }}-buildx-
      - name: Cache Docker layers
        if: github.event_name != 'push' && github.event_name != 'pull_request'
        run: |
          echo "I do not know how to setup cache"
          exit -1
      - name: Download Kernel modules and firmwares
        uses: actions/download-artifact@v2
        with:
          name: Kernel
      - name: Download Kpatch
        uses: actions/download-artifact@v2
        if: needs.kpatch.result == 'success'
        with:
          name: Kpatch
      - name: Build Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: Dockerfile
          push: true
          tags: localhost:5000/thupxe-initramfs
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
      - run: |
          mkdir -p product dist
          if [ -e "kpatch.img" ]; then
            mv kpatch.img product/
          fi
          sudo docker run --rm --volume "${PWD}/product":/product \
            --env KVER="${kver?}" --interactive \
            localhost:5000/thupxe-initramfs bash --noprofile --norc -eo pipefail << 'EOF'
            cd /product
            cp /boot/vmlinu[xz]-"${KVER?}" ./
            mkinitramfs -o "/product/initrd.img-${KVER?}" "${KVER?}"
            chmod 644 *
            ln -s vmlinu[xz]-"${KVER?}" vmlinuz
            ln -s "initrd.img-${KVER?}" initrd.img
            if [ -e "kpatch.img" ]; then
              cat kpatch.img >> initrd.img
            fi
          EOF
          tar -f dist/kernel.tar.gz --create --gzip --numeric-owner --owner root --group root -C product/ .
        env:
          kver: ${{ needs.build.outputs.kerver }}
      - name: Calculate artifact checksums
        run: |
          sha512sum dist/kernel.tar.gz | tee dist/kernel.tar.gz.sha512
      - uses: actions/upload-artifact@v2
        with:
          name: Kernel and Initramfs
          path: |
            dist/kernel.tar.gz.sha512
            dist/kernel.tar.gz
